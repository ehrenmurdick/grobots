#side Grobocops
#color 00F
#seed 1 1 1 1 1

#type Permibot

#hardware
  processor 17
  armor 50
  food-sensor 5
  energy 100 100
  engine .2
  eater 2
  constructor .4
  robot-sensor 30 40

#code

#const LEADER_CH 1
#const DRONE_CH 2

#const LEADER_ID_p 1
#const FOCUS_p 2

#const MAX_RADIUS 20

#var msg-len
#var drone-angle
#var drone-count

#var my-addr
#var my-angle

#vector new-pos

; args: drone-id
calc-drone-addr:
  1001 swap -
return

; args: angle
calc-drone-position:
  10 swap polar-to-rect FOCUS_p vread v+ 1 restrict-position
return

need-command:
  -1 my-addr write
  id 1 DRONE_CH send
return

ClaimLeader:
  0 LEADER_ID_p read = if
    id LEADER_ID_p write
  then
  sync

  id LEADER_ID_p read = if
    position FOCUS_p vwrite
    sync
    Leader_idle& jump
  else
    Drone_idle& jump
  then

Initialize:
  id calc-drone-addr& call my-addr!
  need-command& call

  ClaimLeader& jump

Leader_idle:
  1 robot-sensor-sees-friends!
  0 robot-sensor-sees-enemies!

  do
    10 periodic-robot-sensor
    drop
  DRONE_CH messages num-robot-results < while-loop

  DRONE_CH messages drone-count!
  2pi drone-count / drone-angle!

  do DRONE_CH receive while
    drone-angle drone-count * swap calc-drone-addr& call write
    drone-count 1 - drone-count!
  loop

  Drone_idle& jump

Drone_idle:
  my-addr read my-angle!
  -1 my-angle <> if
    sync
    my-angle calc-drone-position& call new-pos!
    position new-pos dist .1 > if
      Drone_seek& jump
    else
      ClaimLeader& jump
    then
  then
  Drone_idle& jump

Drone_seek:
  position new-pos dist .1 > if
    new-pos seek-location
  else
    Drone_feed& jump
  then
  Drone_seek& jump

Drone_feed:
  .67 1 balance-type
  .33 2 balance-type
  autoconstruct
  eaten if
    Drone_feed& jump
  else
    fire-food-sensor

    food-found if
      food-position new-pos!
      Drone_seek& jump
    then
    Drone_idle& jump
  then

#start Initialize

#type Robobot

#hardware

#end

#side Ehren
#color F0F

#code
#const FoodChannel 1
#const SyphonChannel 2
#const ClaimFrequency 100
#const ClaimStaleTime 150

; x y -> offset
location-to-address:
  10 / floor
  swap
  10 / floor 10 *
  +
return

address-to-location:
  dup
  10 / floor
  10 * 5 +
  swap
  10 mod
  10 * 5 +
return

#type Eater
#hardware
  processor 20
  food-sensor 7
  solar-cells .01
  engine .1
  eater 1
  energy 60 60
  constructor 1
#code
#var Home
#var LastClaim
#vector Dest

claim-stale-time:
  time ClaimStaleTime < if
    1
  else
    time ClaimStaleTime -
  then
return

doevents:
  Dest seek-location
  update-claim^
  autoconstruct
return

update-claim:
  LastClaim 
  time ClaimFrequency - 
  < if
    time LastClaim!
    time Home write
  then
return

arrived:
  position Dest dist radius <
return

; address -- bool
check-address:
    #var check-address-address
    read check-address-address!

    check-address-address
    claim-stale-time^
    <
return

find-home:
  #var find-home-x 1
  1 Home!

  do 
    Home check-address^
  until
    find-home-x Home!
    find-home-x 1 + find-home-x!
    find-home-x 100 mod find-home-x!

    find-home-x 0 = if 
      1 find-home-x!
    then
  loop
  time Home write
  time LastClaim!
return

WaitForFood:
Home address-to-location^ Dest!
do
  doevents^
  40 periodic-food-sensor if
    food-found if
      food-position location-to-address^ Home = if
        SeekFood& jump
      then
    then
  then
forever

SeekFood:
food-position Dest!
do
  doevents^
  arrived^ Eat& ifg
forever

Eat:
do
  doevents^
  eaten WaitForFood& nifg
forever

GoHome:
Home address-to-location^ Dest!
do
  doevents^
  arrived^ WaitForFood& ifg
forever


#start
do time id 10 * < while
  sync
loop
find-home^
GoHome& jump


#end

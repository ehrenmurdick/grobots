#side state-machine
#color DAA
#code
#const HomeOffset 100

#var Home
#var state

#var last-chirp

#vector Dest


location-to-address:
  10 / floor 10 *
  swap
  10 / floor
  +
  HomeOffset +
return

address-to-location:
  HomeOffset - 
  dup
  10 / floor
  swap
  10 mod
  swap
  10 vs*
  5 5 v+
return

#type builder
#hardware
  eater 1
  food-sensor 7
  engine .1
  processor 20
  energy 50 100
  constructor 1

#code

find-home:
  HomeOffset Home!

  do Home HomeOffset 100 + < while
    Home 10 mod 3 > if
      Home 10 + Home!
      Home 10 / floor 10 * Home!
    then
    Home check-address^ if
      Home claim^
      return
    then
    Home 1 + Home!
  loop
return

claim:
  Home!
  chirp-now^
return

chirp:
  energy 0 > nifr
  last-chirp time 50 - < if
    chirp-now^
  then
return

chirp-now:
  time last-chirp!
  time Home write
return

check-address:
  read dup if
    time 100 - > if
      0
    else
      1
    then
  else 
    drop
    1
  then
return

go-home:
  GoingHome& state!
  Home address-to-location^ Dest!
return

GoingHome:
  Dest seek-location
  position Dest radius in-range if
    search-food^
  then
return

seek-food:
  food-position Dest!
  SeekingFood& state!
return

SeekingFood:
  Dest seek-location
  position Dest radius in-range if
    eat^
  then
return

eat:
  Eating& state!
return

Eating:
  Dest seek-location
  eaten nif
    go-home^
  then
return

search-food:
  SearchFood& state!
return

cell-empty:
  chirp-now^
  find-home^
  go-home^
return

SearchFood:
  Dest seek-location
  40 periodic-food-sensor if
    food-found if
      food-position location-to-address^ Home = if
        seek-food^
      else
        cell-empty^
      then
    else
      cell-empty^
    then
  then
return

doevents:
  chirp^
  autoconstruct
return

#start
do id 10 * time > while
  sync
loop
find-home^
go-home^
do
  doevents^
  state call
forever


#end

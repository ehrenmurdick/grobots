#side state-machine
#color DAA

#seed 1 1 1 2

#code
#const HomeOffset 100
#const BuilderType 1
#const MissileType 2

#const TargetChannel 1

#var Home
#var state

#var last-chirp

#vector Dest

address-in-bounds?:
  address-to-location^ 
  2dup 0 restrict-position
  v=
return


location-to-address:
  10 / floor 10 *
  swap
  10 / floor
  +
  HomeOffset +
return

address-to-location:
  HomeOffset - 
  dup
  10 / floor
  swap
  10 mod
  swap
  10 vs*
  5 5 v+
return

#var find-home-r 1
#var find-home-theta 0
#var find-home-x 1
#var find-home-address
#const find-home-step 1
find-home:
  1 find-home-r!
  0 find-home-theta!
  0 4 random pi * find-home-theta + find-home-theta!
  1 find-home-x!
  position location-to-address^ Home!

  do 
    Home 0 = if 
      1 Home!
    then
    Home check-address^
  until
    Dest seek-location
    find-home-step find-home-theta *
    find-home-x +
    find-home-r!

    find-home-r 100 mod find-home-r!

    find-home-r find-home-theta polar-to-rect
    position v+
    location-to-address^ find-home-address!

    find-home-address address-in-bounds?^ if
      find-home-address address-to-location^ position dist 75 < if
        find-home-address Home!
      then
    then
    
    pi find-home-r /
    find-home-theta +
    find-home-theta!
  loop
  chirp-now^
return

claim:
  Home!
  chirp-now^
return

chirp:
  energy 0 > nifr
  last-chirp time 50 - < if
    chirp-now^
  then
return

chirp-now:
  time last-chirp!
  time Home write
return

check-address:
  read dup if
    time 100 - > if
      0
    else
      1
    then
  else 
    drop
    1
  then
return

go-home:
  GoingHome& state!
  Home address-to-location^ Dest!
return

GoingHome:
  Dest seek-location
  position Dest radius in-range if
    search-food^
  then
return

seek-food:
  food-position Dest!
  SeekingFood& state!
return

SeekingFood:
  Dest seek-location
  position Dest radius in-range if
    eat^
  then
return

eat:
  Eating& state!
return

Eating:
  Dest seek-location
  eaten nif
    go-home^
  then
return

search-food:
  SearchFood& state!
return

cell-empty:
  chirp-now^
  find-home^
  go-home^
return

repair:
  armor max-armor < if energy max-energy 2 / > and-if
    1 repair-rate! return
  then
  0 repair-rate! return
return

SearchFood:
  Dest seek-location
  40 periodic-food-sensor if
    food-found if
      food-position location-to-address^ Home = if
        seek-food^
      else
        cell-empty^
      then
    else
      cell-empty^
    then
  then
return


#type builder
#hardware
  armor 50
  solar-cells .04
  repair-rate 0.05
  eater 1
  food-sensor 7
  robot-sensor 20
  engine .08
  processor 30
  energy 50 100
  constructor 1
  blaster 8 7 10

#code

#var wait-time 50

construct:
  constructor-type nif
    0.25 MissileType balance-type
    0.75 BuilderType balance-type
  then
  autoconstruct
return

call-targets:
  energy max-energy 2 / < if
    50 wait-time!
  then
  wait-time periodic-robot-sensor if
    robot-found if
      robot-position time 3 TargetChannel send
      robot-position robot-velocity lead-blaster
      10 wait-time!
    else
      50 wait-time!
    then
  then
return


#start
do id 10 * time > while
  sync
loop
find-home^
go-home^
do
  chirp^
  repair^
  construct^
  call-targets^
  state call
forever

#type missile
#decoration F00 circle
#color F00
#hardware
  solar-cells .02
  armor 20
  processor 5
  energy 20 15
  bomb 100
  robot-sensor 5
  engine 0.1

#code


wait-for-target:
  WaitingForTarget& state!
return

passive-seek:
  PassiveSeeking& state!
return

PassiveSeeking:
  Dest seek-location
  position Dest 15 in-range if
    active-seek^
  then
return

target-lock:
  TargetLock& state!
return

TargetLock:
  fire-robot-sensor sync
  robot-found if
    robot-position robot-velocity seek-moving-location
    engine-max-power engine-power!
    robot-position position 1 in-range if
      die
    then
  else
    wait-for-target^
  then
return

active-seek:
  ActiveSeeking& state!
  Dest seek-location
  engine-max-power engine-power!
return

ActiveSeeking:
  fire-robot-sensor sync
  energy max-energy 4 / < if
    wait-for-target^
  then
  robot-found if
    target-lock^
  then
return

WaitingForTarget:
  0 engine-power!
  energy max-energy 0.75 * < ifr
  TargetChannel receive if
    time 50 - > if
      2dup position 30 in-range if
        Dest!
        passive-seek^
      else
        2drop
      then
    then
  then
  stack dropn
return

#start
wait-for-target^
do
  state call
  enemy-collision if die then
forever


#end
